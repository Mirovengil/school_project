<p>Во многих задачах требуется разбить число <b>n</b> на простые множители. Первое, что многим
приходит в голову -- проверять каждый множитель от нуля до <b>n</b> на то, что он является простым.</p>
<p>В принципе, эту идею нельзя назвать неправильной, но эта реализация алгоритма в любом случае будет
работать очень долго. Поэтому будем упрощать.</p>
<p>К примеру, рассмотрим число 100. Его множителями являются числа: 1, 2, 4, 5, 10, 20, 25, 50, 100.</p>
<p>Но простыми являются только 1, 2 и 5. Соответственно, 100 = 2 * 2 * 5 * 5. </p>
<p>Нужно обратить внимание на следующее:
<ul>
    <li>4 = 2 * 2</li>
    <li>10 = 2 * 5</li>
    <li>20 = 5 * 2 * 2</li>
    <li>25 = 5 * 5</li>
    <li>50 = 2 * 5 * 5</li>
    <li>100 = 5 * 5 * 2 * 2</li>
</ul>
</p>
<p>То есть, если сократить рассматриваемое число на множитель 2 столько раз, сколько он встречается в числе,
то множители, которые не являются простыми и содержат 2 в развёрнутой записи, уже не встретятся. То есть, 
поделив 100 на 2 столько раз, сколько возможно, мы сделаем его неделимым на 10, 20, 50 и 100. Из множителей, 
которые не являются простыми, осталось только число 25. Оно убирается путём деления рассматриваемого числа
на простой множитель 5 столько раз, сколько множитель встречается в числе.</p>
<p>Словесное описание алгоритма может показать несколько сложным, но на самом деле всё очень просто.</p>
<p class = "lang">C++</p>
<pre><code class = "C++">
for (int i = 2; i <= n; ++i) //Единица всегда является множителем
    while (n % i == 0) //Пока множитель содержится в числе
    {
        std::cout << i << " * "; //Вывести его на экран
        n /= i; //И убрать его из числа
    };
</code></pre>
<p class = "lang">Pascal</p>
<pre><code class = "Pascal">
for i := 2 to n do {Единица всегда является множителем}
    while (n <b>mod</b> i = 0) do {Пока множитель содержится в числе}
    begin
        write(i, ' * '); {Вывести его на экран}
        n := n / i; {И убрать его из числа}
    end;
</code></pre>
<p class = "lang">Python</p>
<pre><code class = "Python">
for i in range(2, n + 1): #Единица всегда является множителем
    while n % i == 0: #Пока множитель содержится в числе
        print(i, end = " * ") #Вывести его на экран
        n = n // i #И убрать его из числа
</code></pre>
<p>Вот и всё! Вы успешно разбили число на простые множители. Естественно, вместо вывода можно подставить любую другую
операцию: добавление в массив, увеличение счётчика и так далее.</p>
<a href="./integer.html" class = "btn">Алгоритмы обработки чисел</a>
