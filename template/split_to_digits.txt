<p>Итак, вам понадобилось узнать, из каких чисел состоит число, и, возможно,
проделать с ними некие операции.</p>
<p>Для реализации этого алгоритма надо понять две несложные вещи.</p>
<p>Первое -- как получить последнюю цифру числа. Последняя цифра числа всегда
меньше десяти. Остаток от деления на десять (операция <b>mod</b> или <b>%</b>) 
всегда оставит только цифру, меньшую десяти. То есть, для любого числа <b>n</b></p>
<~c~>
    int last = n % 10;
<~/c~>
<~pa~>
    last := n mod 10;
<~/pa~>
<~py~>
    last = n % 10
<~/py~>
<p>В переменной <b>last</b> будет храниться последняя цифра числа <b>n</b>.</p>
<p>Но нам-то надо получить все цифры числа <b>n</b>! Для этого надо научиться
"отрезать" последнюю цифру числа.</p>
<p>Если поделить число на десять, то мы переместим запятую на один знак влево.
Казалось бы, операция не подходит. Но если оставить от числа только целую часть -- 
мы достигнем желаемого результата: последняя цифра "уйдёт". Чтобы не морочить себе
голову преобразованиями дробной части, просто будем работать в целых числах:</p>
<~c~>
    int last = n % 10;
    n = n / 10;
<~/c~>
<~pa~>
    last := n mod 10;
    n := n div 10;
<~/pa~>
<~py~>
    last = n % 10
    n = n // 10
<~/py~>
<p>В принципе, алгоритм почти готов. Осталось добавить ему одно свойство -- универсальность:
ведь заранее может быть неизвестно, сколько цифр в числе. Поэтому будем использовать цикл с предусловием.</p>
<p>Если число меньше десяти, то при целочисленном делении на десять оно даст 0. Это и будет условием выхода:</p>
<~c~>
    while (n > 0)
    {
    <~tab~>int last = n % 10;
    <~tab~>n = n / 10;
    <~tab~>//А здесь с цифрами можно выполнять операции
    <~tab~>//К примеру -- добавить их в массив или напечатать
    };
<~/c~>
<~pa~>
    while (n > 0) do
    begin
    <~tab~>last := n % 10;
    <~tab~>n := n div 10;
    <~tab~>{А здесь с цифрами можно выполнять операции}
    <~tab~>{К примеру -- добавить их в массив или напечатать}
    end;
<~/pa~>
<~py~>
    while n > 0:
    <~tab~>last = n % 10
    <~tab~>n = n // 10
    <~tab~>#А здесь с цифрами можно выполнять операции
    <~tab~>#К примеру -- добавить их в массив или напечатать
<~/py~>
<p>Обратите внимание, что так как мы постоянно берём последнюю цифру числа, то 
все цифры будут идти в обратном порядке.</p>
<a href="./integer.html" class = "btn">Алгоритмы обработки чисел</a>
